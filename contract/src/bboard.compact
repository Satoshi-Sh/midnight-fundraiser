// This file is part of midnightntwrk/example-counter.
// Copyright (C) 2025 Midnight Foundation
// SPDX-License-Identifier: Apache-2.0
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

pragma language_version >= 0.16 && <= 0.17;

import CompactStandardLibrary;

export enum State {
  VACANT,
  OCCUPIED
}

export ledger state: State;

export ledger title: Maybe<Opaque<"string">>;

export ledger message: Maybe<Opaque<"string">>;

export ledger goal: Field;

export ledger raised: Field;

export ledger sequence: Counter;

export ledger walletAddress: Maybe<Bytes<32>>;

export ledger owner: Bytes<32>;

constructor() {
  state = State.VACANT;
  title = none<Opaque<"string">>();
  message = none<Opaque<"string">>();
  sequence.increment(1);
  walletAddress = none<Bytes<32>>();

  goal = 0;
  raised = 0;
}

witness localSecretKey(): Bytes<32>;

export circuit post(
  newTitle: Opaque<"string">,
  newMessage: Opaque<"string">,
  newGoal: Field,
  newWalletAddress: Bytes<32>
  ): [] {
  assert(state == State.VACANT, "Attempted to post to an occupied board");
  title = disclose(some<Opaque<"string">>(newTitle));
  owner = disclose(publicKey(localSecretKey(), sequence as Field as Bytes<32>));
  message = disclose(some<Opaque<"string">>(newMessage));
  goal = disclose(newGoal);
  raised = disclose(0);
  walletAddress = disclose(some<Bytes<32>>(newWalletAddress));
  state = State.OCCUPIED;
}

export circuit takeDown(): Opaque<"string"> {
  assert(state == State.OCCUPIED, "Attempted to take down post from an empty board");
  assert(owner == publicKey(localSecretKey(), sequence as Field as Bytes<32>), "Attempted to take down post, but not the current owner");
  const formerMsg = message.value;
  state = State.VACANT;
  sequence.increment(1);
  message = none<Opaque<"string">>();
  return formerMsg;
}

export circuit contribute(amount: Field): [] {
  assert(state == State.OCCUPIED, "No active campaign to contribute to");

  raised = disclose(raised + amount);
  // assert(raised <= goal, "Contribution exceeds goal");
}


export circuit publicKey(sk: Bytes<32>, sequence: Bytes<32>): Bytes<32> {
  return persistentHash<Vector<3, Bytes<32>>>([pad(32, "bboard:pk:"), sequence, sk]);
}
